[tool.poetry]
name = "itglue-mcp-server"
version = "0.1.0"
description = "MCP server for intelligent IT Glue documentation querying"
authors = ["Your Name <your.email@example.com>"]
license = "MIT"
readme = "README.md"
packages = [{include = "src"}]

[tool.poetry.dependencies]
python = "^3.12"
# MCP and API
# mcp-python = "^0.1.0"  # Commented out - will install separately
fastapi = "^0.104.1"
uvicorn = {extras = ["standard"], version = "^0.24.0"}
websockets = "^12.0"
httpx = "^0.25.2"
aiohttp = "^3.9.1"

# Databases
sqlalchemy = "^2.0.23"
asyncpg = "^0.29.0"
neo4j = "^5.14.0"
qdrant-client = "^1.7.0"
redis = {extras = ["hiredis"], version = "^5.0.1"}
aioredis = "^2.0.1"
alembic = "^1.13.0"

# Task Queue
celery = {extras = ["redis"], version = "^5.3.4"}
flower = "^2.0.1"

# Data Processing
pydantic = "^2.5.2"
pydantic-settings = "^2.1.0"
pandas = "^2.1.4"
numpy = "^1.26.2"

# NLP and Embeddings
openai = "^1.6.0"
tiktoken = "^0.5.2"
langchain = "^0.0.350"
sentence-transformers = "^2.2.2"

# Security
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
python-multipart = "^0.0.6"
cryptography = "^41.0.7"

# Monitoring
prometheus-client = "^0.19.0"
opentelemetry-api = "^1.22.0"
opentelemetry-sdk = "^1.22.0"
opentelemetry-instrumentation-fastapi = "^0.43b0"
structlog = "^23.2.0"

# Utilities
python-dotenv = "^1.0.0"
pyyaml = "^6.0.1"
click = "^8.1.7"
rich = "^13.7.0"
tenacity = "^8.2.3"
backoff = "^2.2.1"

# Frontend
streamlit = "^1.29.0"
plotly = "^5.18.0"
streamlit-chat = "^0.1.1"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.3"
pytest-asyncio = "^0.21.1"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
pytest-xdist = "^3.5.0"
pytest-env = "^1.1.3"
black = "^23.12.0"
mypy = "^1.7.1"
ruff = "^0.1.8"
isort = "^5.13.2"
pre-commit = "^3.6.0"
ipython = "^8.18.1"
ipdb = "^0.13.13"
faker = "^21.0.0"
factory-boy = "^3.3.0"
freezegun = "^1.3.1"
responses = "^0.24.1"
testcontainers = {extras = ["postgresql", "neo4j", "redis"], version = "^3.7.1"}

[tool.poetry.group.docs.dependencies]
mkdocs = "^1.5.3"
mkdocs-material = "^9.5.2"
mkdocstrings = {extras = ["python"], version = "^0.24.0"}

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
skip_gitignore = true

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_unimported = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
pythonpath = ["src"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests",
    "performance: Performance tests",
    "security: Security tests",
]

[tool.ruff]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "W191",  # indentation contains tabs
]
fixable = ["ALL"]
unfixable = []
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]
line-length = 88
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
target-version = "py311"

[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
skip_empty = true
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self\\.debug",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]