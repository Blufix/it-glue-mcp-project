version: '3.9'

services:
  # PostgreSQL - Structured data storage
  postgres:
    image: postgres:15-alpine
    container_name: itglue-postgres
    environment:
      POSTGRES_DB: itglue
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-Dfgytw6745g}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5434:5432"
    networks:
      - itglue-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d itglue"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Neo4j - Graph database for relationships
  neo4j:
    image: neo4j:5-community
    container_name: itglue-neo4j
    environment:
      NEO4J_AUTH: neo4j/${NEO4J_PASSWORD:-Dfghtye645}
      NEO4J_PLUGINS: '["apoc", "graph-data-science"]'
      NEO4J_dbms_memory_pagecache_size: 1G
      NEO4J_dbms_memory_heap_max__size: 1G
      NEO4J_dbms_memory_heap_initial__size: 1G
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    ports:
      - "7475:7474"  # HTTP
      - "7688:7687"  # Bolt
    networks:
      - itglue-network
    healthcheck:
      test: ["CMD-SHELL", "wget -O /dev/null -q http://localhost:7474 || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 5

  # Qdrant - Vector database for semantic search
  qdrant:
    image: qdrant/qdrant:v1.7.3
    container_name: itglue-qdrant
    volumes:
      - qdrant_data:/qdrant/storage
    ports:
      - "6333:6333"  # REST API
      - "6334:6334"  # gRPC
    environment:
      QDRANT__SERVICE__GRPC_PORT: 6334
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__STORAGE__STORAGE_PATH: /qdrant/storage
    networks:
      - itglue-network
    restart: unless-stopped

  # Redis - Caching and message broker
  redis:
    image: redis:7-alpine
    container_name: itglue-redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6380:6379"
    networks:
      - itglue-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # Prometheus - Metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: itglue-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    networks:
      - itglue-network
    restart: unless-stopped

  # Grafana - Metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: itglue-grafana
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: redis-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3000:3000"
    networks:
      - itglue-network
    depends_on:
      - prometheus
    restart: unless-stopped

  # Flower - Celery monitoring (development)
  flower:
    image: mher/flower:latest
    container_name: itglue-flower
    environment:
      CELERY_BROKER_URL: redis://redis:6379/0
      FLOWER_PORT: 5555
      FLOWER_BASIC_AUTH: ${FLOWER_USER:-admin}:${FLOWER_PASSWORD:-admin}
    ports:
      - "5555:5555"
    networks:
      - itglue-network
    depends_on:
      - redis
    profiles:
      - dev

  # MinIO - Object storage (optional, for future use)
  minio:
    image: minio/minio:latest
    container_name: itglue-minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    command: server /data --console-address ":9001"
    networks:
      - itglue-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    profiles:
      - full

volumes:
  postgres_data:
    driver: local
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local
  neo4j_import:
    driver: local
  neo4j_plugins:
    driver: local
  qdrant_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  minio_data:
    driver: local

networks:
  itglue-network:
    driver: bridge