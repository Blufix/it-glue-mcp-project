version: '3.9'

# Production overrides for docker-compose.yml
services:
  # IT Glue MCP Server
  mcp-server:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: itglue-mcp-server
    env_file:
      - .env
    environment:
      ENVIRONMENT: production
      DATABASE_URL: postgresql+asyncpg://postgres:${POSTGRES_PASSWORD}@postgres:5432/itglue
      REDIS_URL: redis://redis:6379
      QDRANT_URL: http://qdrant:6333
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: ${NEO4J_PASSWORD}
      LOG_LEVEL: INFO
    volumes:
      - ./logs:/app/logs
    ports:
      - "8001:8001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      qdrant:
        condition: service_started
      neo4j:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import sys; sys.exit(0)"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - itglue-network
    command: python -m src.mcp.server
    restart: unless-stopped

  # FastAPI Application
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: itglue-api
    env_file:
      - .env
    environment:
      ENVIRONMENT: production
      DATABASE_URL: postgresql+asyncpg://postgres:${POSTGRES_PASSWORD}@postgres:5432/itglue
      REDIS_URL: redis://redis:6379
      QDRANT_URL: http://qdrant:6333
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: ${NEO4J_PASSWORD}
      LOG_LEVEL: INFO
    volumes:
      - ./logs:/app/logs
    ports:
      - "8002:8002"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      qdrant:
        condition: service_started
      neo4j:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - itglue-network
    command: uvicorn src.api.app:app --host 0.0.0.0 --port 8002 --workers 4
    restart: unless-stopped

  # Sync Worker
  sync-worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: itglue-sync-worker
    env_file:
      - .env
    environment:
      ENVIRONMENT: production
      DATABASE_URL: postgresql+asyncpg://postgres:${POSTGRES_PASSWORD}@postgres:5432/itglue
      REDIS_URL: redis://redis:6379
      QDRANT_URL: http://qdrant:6333
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: ${NEO4J_PASSWORD}
      LOG_LEVEL: INFO
    volumes:
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      qdrant:
        condition: service_started
      neo4j:
        condition: service_healthy
    networks:
      - itglue-network
    command: python -m src.sync.orchestrator --continuous
    restart: unless-stopped

  # Embedding Worker
  embedding-worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: itglue-embedding-worker
    env_file:
      - .env
    environment:
      ENVIRONMENT: production
      DATABASE_URL: postgresql+asyncpg://postgres:${POSTGRES_PASSWORD}@postgres:5432/itglue
      REDIS_URL: redis://redis:6379
      QDRANT_URL: http://qdrant:6333
      LOG_LEVEL: INFO
    volumes:
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      qdrant:
        condition: service_started
    networks:
      - itglue-network
    command: python -m src.embeddings.manager --continuous
    restart: unless-stopped

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: itglue-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites-enabled:/etc/nginx/sites-enabled:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - api
      - mcp-server
    networks:
      - itglue-network
    restart: unless-stopped